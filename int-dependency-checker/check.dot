digraph G {    subgraph cluster_DEPR {        label="DEPR";        "DEPR.__call__";    }    subgraph cluster_TODO {        label="TODO";        "TODO.__call__";    }        "_resolve_types";        "wrapper";        "_cache";        "_id_cache";        "_get_all_dict_entires_except";        "_tp_getitem";        "is_func";        "get_name";        "__repr_self__";        "warn";        "make_key";        "_get_multiple_dict_entries";        "_copy";        "_collect_type_params_repr";        "_has_ellipsis";        "get_cls_meta";        "_got_finalized";        "_is_class";        "is_meth";        "_r";        "getframe";        "_hasattr";    subgraph cluster__Mixin {        label="_Mixin";        "_Mixin.__init_subclass__";    }    subgraph cluster_gettableMeta {        label="gettableMeta";        "gettableMeta.__call__";    }    subgraph cluster_gettable {        label="gettable";        "gettable.__class_getitem__";        "gettable.__getitem__";        "gettable.__init_subclass__";        "gettable._init";        "gettable._get_expected_for_tp";    }    subgraph cluster_TypeVar {        label="TypeVar";        "TypeVar.__repr__";        "TypeVar.__or__";    }    subgraph cluster_NewConstruct {        label="NewConstruct";        "NewConstruct.__eq__";        "NewConstruct.__ne__";        "NewConstruct.__init_subclass__";    }    subgraph cluster_NewTypeBaseClass {        label="NewTypeBaseClass";        "NewTypeBaseClass.__init__";    }    subgraph cluster_NotCallable {        label="NotCallable";        "NotCallable.__call__";    }    subgraph cluster__Decorator {        label="_Decorator";        "_Decorator.__init_subclass__";    }    subgraph cluster_UnionType {        label="UnionType";        "UnionType.__eq__";        "UnionType.__ne__";    }    subgraph cluster__set {        label="_set";        "_set.__init__";        "_set.__contains__";        "_set.__getitem__";        "_set.__init_subclass__";        "_set.remove";    }    subgraph cluster_TypedSet {        label="TypedSet";        "TypedSet.__init__";        "TypedSet.__contains__";        "TypedSet.add";    }    subgraph cluster__Final {        label="_Final";        "_Final.__setattr__";        "_Final.__init__";        "_Final.__init_subclass__";    }    subgraph cluster__FinalClassVar {        label="_FinalClassVar";        "_FinalClassVar.__init__";        "_FinalClassVar.__repr__";    }    subgraph cluster_static {        label="static";        "static.__init__";    }    subgraph cluster_OwnReturnType {        label="OwnReturnType";        "OwnReturnType.__init__";        "OwnReturnType.__call__";    }    subgraph cluster_MultipleTypesEnforced {        label="MultipleTypesEnforced";        "MultipleTypesEnforced.__init__";        "MultipleTypesEnforced.__call__";    }    subgraph cluster_catch {        label="catch";        "catch.__call__";    }    subgraph cluster_onException {        label="onException";        "onException.__call__";    }    subgraph cluster_descriptor {        label="descriptor";        "descriptor.__init__";        "descriptor.__call__";        "descriptor.__getitem__";        "descriptor.__or__";        "descriptor.__ror__";        "descriptor.__eq__";        "descriptor.__ne__";        "descriptor.__set_doc_helper__";    }    subgraph cluster_OwnedSet {        label="OwnedSet";        "OwnedSet.__add__";    }    subgraph cluster_typeNotDefinedType {        label="typeNotDefinedType";        "typeNotDefinedType.__call__";    }    "DEPR.__call__" -> "warn";    "TODO.__call__" -> "warn";    "_resolve_types" -> "get_args";    "_resolve_types" -> "get_origin";    "_resolve_types" -> "_isinstance";    "_isinstance" -> "get_args";    "_isinstance" -> "get_origin";    "_isinstance" -> "_isinstance";    "_is_generic" -> "get_origin";    "wrapper" -> "make_key";    "wrapper" -> "_collect_type_params_repr";    "_cache" -> "_copy";    "_id_cache" -> "_copy";    "get_args" -> "_is_generic";    "_get_all_dict_entires_except" -> "_get_multiple_dict_entries";    "_tp_getitem" -> "get_args";    "_tp_getitem" -> "_copy";    "_trunc_repr" -> "_trunc";    "_repr_obj" -> "_is_generic";    "_repr_obj" -> "_trunc_repr";    "_repr_obj" -> "_repr_type";    "_repr_obj" -> "get_args";    "_repr_obj" -> "_repr_obj";    "all_isinstance" -> "get_args";    "all_isinstance" -> "_isinstance";    "all_isinstance" -> "Type";    "all_isinstance" -> "all_isinstance";    "unpack" -> "unpack";    "flatten" -> "flatten";    "flatten" -> "_is_empty";    "flatten" -> "pack";    "_Mixin.__init_subclass__" -> "get_cls_meta";    "walk_type_tree" -> "get_args";    "walk_type_tree" -> "get_origin";    "walk_type_tree" -> "walk_type_tree";    "_is_type_or_ellipsis" -> "get_args";    "_is_type_or_ellipsis" -> "_is_type_or_ellipsis";    "_is_type_or_ellipsis" -> "get_origin";    "gettableMeta.__call__" -> "gettable._init";    "gettableMeta.__call__" -> "typeNotDefinedType.__call__";    "gettable._can_resolve_gettable_types" -> "all_isinstance";    "gettable._can_resolve_gettable_types" -> "gettable._can_resolve_gettable_types";    "gettable._can_resolve_gettable_types" -> "_no_arg_given";    "gettable._can_resolve_gettable_types" -> "get_args";    "gettable._can_resolve_gettable_types" -> "_repr_type";    "gettable._can_resolve_gettable_types" -> "get_origin";    "gettable._can_resolve_gettable_types" -> "_repr_obj";    "gettable._can_resolve_gettable_types" -> "_hl_arg";    "gettable.__class_getitem__" -> "_trunc";    "gettable.__class_getitem__" -> "all_isinstance";    "gettable.__class_getitem__" -> "_collect_type_params_repr";    "gettable.__class_getitem__" -> "_has_ellipsis";    "gettable.__class_getitem__" -> "_is_type_or_ellipsis";    "gettable.__getitem__" -> "gettable._get_expected_for_tp";    "gettable.__getitem__" -> "all_isinstance";    "gettable.__getitem__" -> "_has_ellipsis";    "gettable.__getitem__" -> "gettable._can_resolve_gettable_types";    "gettable.__getitem__" -> "_repr_type";    "gettable.__getitem__" -> "_repr_obj";    "gettable.__init_subclass__" -> "get_cls_meta";    "gettable.__init_subclass__" -> "OwnedSet.__init_subclass__";    "TypeVar.__repr__" -> "_FinalClassVar.__repr__";    "NewConstruct.__eq__" -> "Type";    "NewConstruct.__eq__" -> "_FinalClassVar.__repr__";    "NewConstruct.__ne__" -> "Type";    "NewConstruct.__ne__" -> "_FinalClassVar.__repr__";    "NewConstruct.__init_subclass__" -> "OwnedSet.__init_subclass__";    "NewTypeBaseClass.__init__" -> "_got_finalized";    "NewTypeBaseClass.__init__" -> "pack";    "NotCallable.__call__" -> "Type";    "_Decorator.__init_subclass__" -> "OwnedSet.__init_subclass__";    "UnionType.__eq__" -> "_repr_obj";    "UnionType.__ne__" -> "_repr_obj";    "_set.__init__" -> "TypedSet.add";    "_set.__contains__" -> "unpack";    "_set.__getitem__" -> "_repr_obj";    "_set.__getitem__" -> "all_isinstance";    "_set.__init_subclass__" -> "OwnedSet.__init_subclass__";    "_set.remove" -> "OwnedSet.remove";    "TypedSet.__init__" -> "TypedSet.add";    "TypedSet.__contains__" -> "unpack";    "TypedSet.add" -> "flatten";    "TypedSet.add" -> "all_isinstance";    "_Final.__setattr__" -> "Type";    "_Final.__init__" -> "OwnedSet.remove";    "_Final.__init__" -> "_is_class";    "_Final.__init__" -> "TypedSet.add";    "_Final.__init__" -> "Type";    "_Final.__init_subclass__" -> "TypedSet.add";    "_Final.__init_subclass__" -> "OwnedSet.__init_subclass__";    "_FinalClassVar.__init__" -> "_no_arg_given";    "OwnedSet.__add__" -> "getframe";    "OwnedSet.remove" -> "OwnedSet.remove";    "OwnedSet.__init_subclass__" -> "_get_key";    "OwnedSet.__init_subclass__" -> "OwnedSet.__init_subclass__";    "static.__init__" -> "_isinstance";    "static.__init__" -> "OwnedSet.__add__";    "is_func" -> "is_meth";    "is_meth" -> "_hasattr";    "get_name" -> "Type";    "OwnReturnType.__init__" -> "typeNotDefinedType.__call__";    "OwnReturnType.__call__" -> "Type";    "MultipleTypesEnforced.__init__" -> "Type";    "MultipleTypesEnforced.__init__" -> "_no_arg_given";    "MultipleTypesEnforced.__call__" -> "Type";    "__repr_self__" -> "_r";    "__repr_self__" -> "_FinalClassVar.__repr__";    "catch.__call__" -> "Type";    "onException.__call__" -> "Type";    "descriptor.__init__" -> "descriptor.__set_doc_helper__";    "descriptor.__call__" -> "_is_empty";    "descriptor.__getitem__" -> "_is_empty";    "descriptor.__or__" -> "Type";    "descriptor.__ror__" -> "TypeVar.__or__";    "descriptor.__eq__" -> "Type";    "descriptor.__ne__" -> "Type";}